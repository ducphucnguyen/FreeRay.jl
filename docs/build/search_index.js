var documenterSearchIndex = {"docs":
[{"location":"Install_Bellhop/#Bellhop-and-FreeRay.jl","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"","category":"section"},{"location":"Install_Bellhop/","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"As we may already know, Bellhop is open-source software to perform both 2D and 3D ray tracing. Bellhop is a highly efficient ray tracing program written in Fortran by Michael Porter. Bellhop is widely-used for predicting acoustic pressure fields in ocean environments. We here will see how to adapt this program to outdoor sound propagation problems in atmospheric environments.","category":"page"},{"location":"Install_Bellhop/","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"To run Bellhop, we need to write input files and then read output files for plotting. These things sometimes are inconvenient for those who are not often working with low-level programming languages. In this tutorial, we will use FreeRay.jl package to model fundamental outdoor sound propagations problems. FreeRay can be used to write input files, run Bellhop, read and plot output such as ray tracing and transmission loss plots. We will also see how to use FreeRay for parallel modelling sound propagation problems.","category":"page"},{"location":"Install_Bellhop/#Install-Bellhop","page":"Bellhop and FreeRay.jl","title":"Install Bellhop","text":"","category":"section"},{"location":"Install_Bellhop/","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"Before we can use FreeRay, we need to install Bellhop first. The source code can be download from this website (http://oalib.hlsresearch.com/AcousticsToolbox/). installation details are provided in the website. If you have no experience with programming languages such as C or Fortran, it will take sometime to install Bellhop!","category":"page"},{"location":"Install_Bellhop/#Check-successful-installation","page":"Bellhop and FreeRay.jl","title":"Check successful installation","text":"","category":"section"},{"location":"Install_Bellhop/","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"To check if Bellhop is successfully installed, we run this command in Julia REPL. If we can see the bellow error, this means that we successfully install Bellhop.  Congratulation!","category":"page"},{"location":"Install_Bellhop/","page":"Bellhop and FreeRay.jl","title":"Bellhop and FreeRay.jl","text":"run(`bellhop`)\r\n\r\nSTOP Fatal Error: Check the print file for details\r\nProcess(`bellhop`, ProcessExited(0))","category":"page"},{"location":"#RayTracer-:-Differentiable-Ray-Tracing-in-Julia","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"<p align=\"center\">\r\n    <video width=\"512\" height=\"320\" autoplay loop>\r\n        <source src=\"./assets/udem1.webm\" type=\"video/webm\">\r\n    </video>\r\n</p>","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"RayTracer.jl is a library for differentiable ray tracing. It provides utilities for","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Render complex 3D scenes.\nDifferentiate the Ray Tracer wrt arbitrary scene parameters for Gradient Based Inverse Rendering.","category":"page"},{"location":"#Installation","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Installation","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Download Julia 1.0 or later.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"For the time being, the library is under active development and hence is not registered. But the master branch is pretty stable for experimentation. To install it simply open a julia REPL and do ] add RayTracer.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"The master branch will do all computation on CPU. To try out the experimental GPU support do ] add RayTracer#ap/gpu. To observe the potential performance gains of using GPU you will have to render scenes having more number of objects and the 2D image must be of reasonably high resolution.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"note: Note\nOnly rendering is currently supported on GPUs. Gradient Computation is broken but will be supported in the future.","category":"page"},{"location":"#Supporting-and-Citing","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Supporting and Citing","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"This software was developed as part of academic research. If you would like to help support it, please star the repository. If you use this software as part of your research, teaching, or other activities, we would be grateful if you could cite:","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"@misc{pal2019raytracerjl,\r\n    title={{RayTracer.jl: A Differentiable Renderer that supports Parameter Optimization for Scene Reconstruction}},\r\n    author={Avik Pal},\r\n    year={2019},\r\n    eprint={1907.07198},\r\n    archivePrefix={arXiv},\r\n    primaryClass={cs.GR}\r\n}","category":"page"},{"location":"#Contribution-Guidelines","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Contribution Guidelines","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"This package is written and maintained by Avik Pal. Please fork and send a pull request or create a GitHub issue for bug reports. If you are submitting a pull request make sure to follow the official Julia Style Guide and please use 4 spaces and NOT tabs.","category":"page"},{"location":"#Adding-a-new-feature","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Adding a new feature","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"For adding a new feature open a Github Issue first to discuss about it.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Please note that we try and avoid having many primitive objects. This might speed up rendering in some rare cases (as most objects will end up being represented as Triangles) but is really painful to maintain in the future.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"If you wish to add rendering algorithms it needs to be added to the src/renderers directory. Ideally we wish that this is differentiable but we do accept algorithms which are not differentiable (simply add a note in the documentation).","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Any new type that is defined should have a corresponding entry in src/gradients/zygote.jl. Look at existing types to understand how it is done. Note that it is a pretty ugly thing to do and becomes uglier as the number of fields in your struct increases, so do not define something that has a lot of fields unless you need it (see Material).","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"If you don't want a field in your custom type to be not updated while inverse rendering create a subtype of RayTracer.FixedParams and wrap those field in it and store it in your custom type.","category":"page"},{"location":"#Adding-a-tutorial/example","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Adding a tutorial/example","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"We use Literate.jl to convert examples to markdown files. Look into its documentation","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Next use the following commands to convert he script to markdown","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"julia> using Literate\r\n\r\njulia> Literate.markdown(\"examples/your_example.jl\", \"docs/src/getting_started/\",\r\n                         documenter = false)","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Add an entry to docs/make.jl so that it is available in the side navigation bar.","category":"page"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Add an entry to the docs/src/index.md Contents section.","category":"page"},{"location":"#Contents","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Contents","text":"","category":"section"},{"location":"#Home","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Home","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Pages = [\r\n    \"index.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"#Getting-Started-Tutorials","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Getting Started Tutorials","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Pages = [\r\n    \"getting_started/teapot_rendering.md\",\r\n    \"getting_started/inverse_lighting.md\",\r\n    \"getting_started/optim_compatibility.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"#API-Documentation","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"API Documentation","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"Pages = [\r\n    \"api/utilities.md\",\r\n    \"api/differentiation.md\",\r\n    \"api/scene.md\",\r\n    \"api/optimization.md\",\r\n    \"api/renderers.md\",\r\n    \"api/accelerators.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"#Index","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"Index","text":"","category":"section"},{"location":"","page":"RayTracer : Differentiable Ray Tracing in Julia","title":"RayTracer : Differentiable Ray Tracing in Julia","text":"","category":"page"}]
}
