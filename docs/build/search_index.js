var documenterSearchIndex = {"docs":
[{"location":"parallel/#Parallel-running-Bellhop","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"We may see in previous examples that Bellhop is very efficient and fast! The answer for my question if we can run Bellhop faster several time is YES. We can run Bellhop parallel very simple in Julia with effortless. But why do we need to run Bellhop parallel? because in outdoor sound propagation modelling, we usually need to predict acoustic field (or transmission loss) at multiple frequencies (1/3-octave frequency) to estimate overall loss (or overall sound pressure level). This task is independent but it takes time. For this particular task, we can use Multi-Threading in Julia to run multiple tasks simultaneously.","category":"page"},{"location":"parallel/#Load-package","page":"Parallel running Bellhop","title":"Load package","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"using FreeRay, DelimitedFiles","category":"page"},{"location":"parallel/#elevation-and-sound-speed-data","page":"Parallel running Bellhop","title":"elevation and sound speed data","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"elv = readdlm(\"./temp/elevation.txt\")\r\nssp = readdlm(\"./temp/ssp.txt\")","category":"page"},{"location":"parallel/#Receiver","page":"Parallel running Bellhop","title":"Receiver","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"receiver = Receiver(\r\n    depth_point = 1001,\r\n    range_point = 10001,\r\n    depth = Vec2(-1000f0,0f0),\r\n    range = Vec2(0f0,10f0)\r\n)","category":"page"},{"location":"parallel/#Terrain","page":"Parallel running Bellhop","title":"Terrain","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"terrain = Terrain(\r\n    interp_type = \"C\",\r\n    profile = (Vec2(elv[:,1],elv[:,2]))\r\n)","category":"page"},{"location":"parallel/#Sound-speed-profile","page":"Parallel running Bellhop","title":"Sound speed profile","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"sspl = Vec2(ssp[:,1],ssp[:,2])\r\nssp = SSP(sound_speed_profile= sspl)","category":"page"},{"location":"parallel/#Frequency","page":"Parallel running Bellhop","title":"Frequency","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"For example, we want to run multiple frequencies centred at 3-octave bands simultaneously.","category":"page"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"fcentre = 10.0 .^ (0.1 .* (12:43)) # octave frequency centre\r\nfcentre = Float32.(fcentre) # convert to Float32","category":"page"},{"location":"parallel/#Parallel-running","page":"Parallel running Bellhop","title":"Parallel running","text":"","category":"section"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"In this simulation, frequency has only effect on the characteristic impedance. Thus, the value of Zc will be different for each frequency. For illustration purpose, we will use the same value Zc for all frequencies.","category":"page"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"The difference in here is that we will use a loop function to launch several tasks at the same time. These tasks will be execute independently in each thread. To do so, we just need to use @threads macro as below code. My computer have 4 cores and 8 threads, thus I will test some options such as using 4, 6, 8 threads compared to not using macro @threads.","category":"page"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"Threads.nthreads() = 8 # select numbers of threads\r\n#@threads\r\n@time @threads for i = 1: length(fcentre)\r\n    #println(i)\r\n    #a[i] = Threads.threadid()\r\n\r\n    frequency = fcentre[i]\r\n    # Point source 100 Hz at 80 m above ground level\r\n    source = Source(\r\n        frequency = frequency,\r\n        height = -80f0 + (-169f0) # 169 is ground level\r\n    )\r\n\r\n\r\n    ### Boundary condition\r\n    Zc = 12.81 + 11.62im\r\n    Theta, Rmag, Rphase = R_coeff(Zc;len=100)\r\n\r\n    brc = Vec3(Theta,Rmag,Rphase)\r\n    trc = Vec3([0f0,45f0,90f0],[0f0,0f0,0f0],[0f0,0f0,0f0])\r\n\r\n    reflection = Reflection_Coeff(\r\n        top_coeff = trc,\r\n        bottom_coeff = brc\r\n    )\r\n\r\n\r\n    ### Analysis\r\n    opt = Analysis(\r\n        filename = \"Parallel_Bellhop_$i\",\r\n        analyse = \"CG\",\r\n        option1 = \"CFW\",\r\n        option2 = \"F*\",\r\n        num_ray = 161,\r\n        alpha = Vec2(-80.0f0,80.0f0),\r\n        box = Vec2(10f0,1000.0f0),\r\n        step= 0\r\n    )\r\n\r\n    Environment(opt,source, receiver,ssp,terrain,reflection)\r\n\r\n    # Run Bellhop\r\n    fn= opt.filename\r\n    filename = \"temp\\\\$fn\"\r\n    run_bellhop = `bellhop $filename`\r\n    run(run_bellhop)\r\n    rmfile(filename)\r\n\r\nend # end parallel","category":"page"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"We can run Bellhop 4 times faster! without any effort just use @threads in Julia.","category":"page"},{"location":"parallel/","page":"Parallel running Bellhop","title":"Parallel running Bellhop","text":"<p align=\"center\">\r\n    <img width=450 height=200 src=\"./Par.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/#Benchmark-cases","page":"Benchmark cases","title":"Benchmark cases","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"In this example, we will use FreeRay to model 4 benchmark cases for outdoor sound propagation as published by Attenborough et al. (1995).","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"There is an unit point source at h_s = 50 m, a receiver at h_r = 10 m and at a horizontal range R=10000 m. The source emits a constant tone of f = 100 Hz.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"The ground surface is treated as an impedance boundary with the specific characteristic impedance Z_c = 1281 + i1162. This value is used to calculate spherical-wave reflection coefficients.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"The differences between 4 benchmark cases are the use of different sound speed profiles such as constant, positive, negative and composite profiles.","category":"page"},{"location":"benchmark_case/#Case-1:-Constant-sound-speed-profile","page":"Benchmark cases","title":"Case 1: Constant sound speed profile","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./case1.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Load FreeRay package","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"using FreeRay","category":"page"},{"location":"benchmark_case/#Source","page":"Benchmark cases","title":"Source","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"We may notice that the source height is inputted as a negative number. This is convention of Bellhop where upper and lower spaces are modelled as negative and positive axis, respectively. We are interested in upper space, so hereafter all input values for height are negative numbers.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"source = Source(\r\n        frequency = 100f0, # Hz, f0 indicate Float32 number.\r\n        height = -5f0) # m, height","category":"page"},{"location":"benchmark_case/#Receiver","page":"Benchmark cases","title":"Receiver","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"In the benchmark case, only receiver at 1.0 m is interested, but to plot the transmission loss field, we here will calculate for every grid points spacing 1.0 m in both vertical and horizontal directions. The investigation region is 1,000 m in height and 10,000 m in range. Obviously, this will cover the configuration of the benchmark case!","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"receiver = Receiver(\r\n        depth_point = 1001, # number of points in height\r\n        range_point = 10001, # number of points in range\r\n        depth = Vec2(-1000f0,0f0), # height between -1000 m and 0\r\n        range = Vec2(0f0,10f0)) # range between 0 and 10 km (range is always in km)","category":"page"},{"location":"benchmark_case/#Terrain-geometry","page":"Benchmark cases","title":"Terrain geometry","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"We assume that the ground elevation is flat for now, real ground elevation will be discussed in other examples.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"terrain = Terrain(\r\n    interp_type = \"C\", # interpolation method for ground elevation\r\n    profile = (Vec2([0f0,5f0,10f0],[0f0,0f0,0f0])) # need 3 points for modelling flat terrain\r\n)","category":"page"},{"location":"benchmark_case/#Boundary-condition","page":"Benchmark cases","title":"Boundary condition","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"The ground surface is modelled using reflection coefficients which are calculated from characteristic ground impedance Z_c. These coefficients are calculated using Q_reflection or R_reflection functions for spherical-wave reflection coefficients or plane-wave reflection coefficients. The top boundary is atmospheric, thus can be modelled as \"no reflection\". In other words, the reflection coefficients are zero.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"\r\n# Vec3(grazing angle, coefficient, phase angle)\r\nZc = 12.81 + 11.62im\r\nTheta, Rmag, Rphase = R_coeff(Zc;len=100) # plane-wave reflection coeff.\r\n\r\nbrc = Vec3(Theta,Rmag,Rphase)\r\ntrc = Vec3([0f0,45f0,90f0],[0f0,0f0,0f0],[0f0,0f0,0f0])\r\n\r\nreflection = Reflection_Coeff(\r\n        top_coeff = trc,\r\n        bottom_coeff = brc)","category":"page"},{"location":"benchmark_case/#Sound-speed-profile","page":"Benchmark cases","title":"Sound speed profile","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"In this case, we use constant sound speed profile c_0 = 343 m/s.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# Vec2 (height, sound speed)\r\nsspl = Vec2([-1000f0,-500f0,0f0],[343f0,343f0,343f0])\r\nssp = SSP(sound_speed_profile = sspl)","category":"page"},{"location":"benchmark_case/#Analysis","page":"Benchmark cases","title":"Analysis","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"This is an important part to specify what analysis we want to run. There are several options as follows:","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"analyse = \"R\"       - ray tracing\nanalyse = \"E\"       - eigenray\nanalyse = \"A\"       - amplitudes and travel times","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"analyse = \"CG\"      - coherent geometric ray model\nanalyse = \"IG\"      - incoherent geometric ray model\nanalyse = \"CB\"      - coherent Gaussian ray model\nanalyse = \"IB\"      - incoherent Gaussian ray model","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Other options can be found in Bellhop document.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"opt = Analysis(\r\n    filename = \"Case0_Bellhop_f10\", # name of output files\r\n    analyse = \"RG\", # analysis options C-coherent, I-incoherent, G-Geometric ray, B- Gaussian ray.\r\n    option1 = \"CFW\",\r\n    option2 = \"F*\",\r\n    num_ray = 161, # number of ray, resulting in resolution of take-off angles\r\n    alpha = Vec2(-80.0f0,80.0f0), # take-off angle from -80 to 80\r\n    box = Vec2(10f0,1000.0f0), # analysis region\r\n    step= 0\r\n)","category":"page"},{"location":"benchmark_case/#Create-input-files","page":"Benchmark cases","title":"Create input files","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"All input files will be created for analysis.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Environment(opt,source, receiver,ssp,terrain,reflection)","category":"page"},{"location":"benchmark_case/#Run-Bellhop","page":"Benchmark cases","title":"Run Bellhop","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"To run Bellhop in Julia, we just need to call run(bellhop filename). To see running time, we use macro @time.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"fn = opt.filename\r\nfilename = \"temp\\\\$fn\"\r\nrun_bellhop = `bellhop $filename`\r\n@time run(run_bellhop)","category":"page"},{"location":"benchmark_case/#Plots","page":"Benchmark cases","title":"Plots","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"It takes 0.21 seconds to run ray tracing.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# plot ray\r\nPlotRay(\"$filename.ray\",\r\n        xlabs = \"Range, m\",\r\n        ylabs = \"Height, m\")","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./ray1.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"It takes 7.18 seconds to analyse transmission loss field. The results seem to be not really good at near top layer and distances faraway from the source. We may need to increase the resolution of take-off angles of rays. Currently we use 161 rays, resulting in the resolution is 1 deg.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# plot transmission loss field\r\nPlotShd(\"$filename.shd\";\r\n        xlabs = \"Range, m\",\r\n        ylabs = \"Transmission loss, dB\",\r\n        cblabs = \"dB\",\r\n        climb = (40,80))","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./transc1.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Now we try 1601 rays with the resolution of 0.1 deg. It's much better! and it takes only 12.7 seconds to analyse the acoustic field with 1.0 x 10 km with 1.0 m grid and 0.1 deg take-off angle resolution. It is really fast! This is expected because Bellhop is a highly efficient and optimal program written in Fortran. Thus, it is no need to be rewritten in other languages! (I did try in Julia but my code is not better than Bellhop :))","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"My question is if we can make it faster? We will save the answer to a real problem at next section.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./trans2.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/#Case-2:-Positive-sound-gradient-(Downwind)","page":"Benchmark cases","title":"Case 2: Positive sound gradient (Downwind)","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./case2.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"In this case, we only need to modify sound gradient in below code","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# Vec2 (height, sound speed)\r\nsspl = Vec2([-1000f0,-500f0,0f0],[443f0,393f0,343f0])\r\nssp = SSP(sound_speed_profile = sspl)","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"It takes 0.31 seconds to run ray tracing and 23.7 seconds to run transmission loss field.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./ray2.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./transc2.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/#Case-3:-Negative-sound-gradient-(Upwind)","page":"Benchmark cases","title":"Case 3: Negative sound gradient (Upwind)","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./case3.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Modify to negative sound gradient","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# Vec2 (height, sound speed)\r\nsspl = Vec2([-1000f0,-500f0,0f0],[243f0,293f0,343f0])\r\nssp = SSP(sound_speed_profile = sspl)","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./ray3.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./transc3.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/#Case-4:-Composite-profile","page":"Benchmark cases","title":"Case 4: Composite profile","text":"","category":"section"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./case4.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"Modify to composite sound gradient.","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"# Vec2 (height, sound speed)\r\nsspl = Vec2([-1000f0,-300f0,-100f0,0f0],[333f0,333f0,353f0,343f0])\r\nssp = SSP(sound_speed_profile = sspl)","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./ray4.png\">\r\n</p>","category":"page"},{"location":"benchmark_case/","page":"Benchmark cases","title":"Benchmark cases","text":"<p align=\"center\">\r\n    <img width=350 height=200 src=\"./transc4.png\">\r\n</p>","category":"page"},{"location":"#FreeRay-:-Bellhop-for-Outdoor-Sound-Propagation","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"<p align=\"center\">\r\n    <img width=500 height=400 src=\"./plot.png\">\r\n</p>","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"FreeRay.jl is a library for outdoor noise propagation. Numerical ray tracing models are implemented using Bellhop ray tracing program written in Fortran by Michael Porter. FreeRay.jl provides utilities for","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"Prepare input files, run Bellhop and plot output.\nRun Bellhop parallel.","category":"page"},{"location":"#Installation","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Installation","text":"","category":"section"},{"location":"#FreeRay.jl-package","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay.jl package","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"Download Julia 1.5 or later.","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"FreeRay.jl is under development and thus is not registered. To install it simply open a julia REPL and do","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"`] add https://github.com/ducphucnguyen/FreeRay.jl.git`.","category":"page"},{"location":"#Installation-Bellhop","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Installation Bellhop","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"Before we can use FreeRay, we need to install Bellhop first. The source code can be download from this website Bellhop. installation details are provided in the website. If you have no experience with programming languages such as C or Fortran, it will take sometime to install Bellhop!","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"To check if Bellhop is successfully installed, we run this command in Julia REPL. If we can see the bellow error, this means that we successfully install Bellhop.  Congratulation!","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"run(`bellhop`)\r\n\r\nSTOP Fatal Error: Check the print file for details\r\nProcess(`bellhop`, ProcessExited(0))","category":"page"},{"location":"#Supporting-and-Citing","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Supporting and Citing","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"This software was developed as part of academic research. If you would like to help support it, please star the repository. If you use this software as part of your research, teaching, or other activities, we would be grateful if you could cite:","category":"page"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"@article{nguyen2020machine,\r\n  title={A machine learning approach for detecting wind farm noise amplitude modulation},\r\n  author={Nguyen, Duc Phuc and Hansen, Kristy and Lechat, Bastien and Catcheside, Peter and Zajamsek, Branko},\r\n  year={2020},\r\n  publisher={Preprints}\r\n}","category":"page"},{"location":"#Contribution-Guidelines","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Contribution Guidelines","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"This package is written and maintained by Duc Phuc Nguyen. Please fork and send a pull request or create a GitHub issue for bug reports. If you are submitting a pull request make sure to follow the official Julia Style Guide and please use 4 spaces and NOT tabs.","category":"page"},{"location":"#Contents","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Contents","text":"","category":"section"},{"location":"#Home","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Home","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"Pages = [\r\n    \"index.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"#Getting-Started-Tutorials","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"Getting Started Tutorials","text":"","category":"section"},{"location":"","page":"FreeRay : Bellhop for Outdoor Sound Propagation","title":"FreeRay : Bellhop for Outdoor Sound Propagation","text":"Pages = [\r\n    \"benchmark_case.md\",\r\n    \"real_example.md\",\r\n    \"parallel.md\"\r\n]\r\nDepth = 2","category":"page"},{"location":"real_example/#Wind-turbine-noise-propagation","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"In this example, we will model a real case. A wind turbine is positioned on the top of a ridge. The wind turbine hub height is 80 m. We need to prepare input files as follows:","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"elevation file\nsound speed profile file","category":"page"},{"location":"real_example/#Read-elevation-and-sound-speed-files","page":"Wind turbine noise propagation","title":"Read elevation and sound speed files","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Assume that we already have elevation and sound speed profile files in text files. The structure of these files are [range, elevation] and [height, sound speed]. We can read to Julia using DelimitedFiles package.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"using DelimitedFiles\r\n\r\n# read elevation and sound speed files.\r\nelv = readdlm(\"./temp/elevation.txt\") # [range(km), elevation (m)]\r\nssp = readdlm(\"./temp/ssp.txt\") # [height(m), sound speed(m/s)]","category":"page"},{"location":"real_example/#Point-source-100-Hz-at-80-m-above-ground-level","page":"Wind turbine noise propagation","title":"Point source 100 Hz at 80 m above ground level","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Because the hub height is at 80 m above the ground level, thus the absolute source height is added the ground elevation value. In this case, it is 169 m.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"source = Source(\r\n    frequency = 100,\r\n    height = -80 + (-169) # 169 is ground level\r\n)","category":"page"},{"location":"real_example/#Receiver","page":"Wind turbine noise propagation","title":"Receiver","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Similar to previous examples, we will analyse for a height of 1000 m and a range of 10 km with resolution is 1 m both directions.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"receiver = Receiver(\r\n    depth_point = 1001,\r\n    range_point = 10001,\r\n    depth = Vec2(-1000f0,0f0),\r\n    range = Vec2(0f0,10f0)\r\n)","category":"page"},{"location":"real_example/#Terrain-geometry","page":"Wind turbine noise propagation","title":"Terrain geometry","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Input elevation files to 2D vector Vec2.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"terrain = Terrain(\r\n    interp_type = \"C\",\r\n    profile = (Vec2(elv[:,1],elv[:,2]))\r\n)","category":"page"},{"location":"real_example/#Boundary-condition","page":"Wind turbine noise propagation","title":"Boundary condition","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"The boundary conditions are similar as previous examples.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Zc = 12.81 + 11.62im\r\nTheta, Rmag, Rphase = R_coeff(Zc;len=100)\r\n\r\nbrc = Vec3(Theta,Rmag,Rphase)\r\ntrc = Vec3([0f0,45f0,90f0],[0f0,0f0,0f0],[0f0,0f0,0f0])\r\n\r\nreflection = Reflection_Coeff(\r\n    top_coeff = trc,\r\n    bottom_coeff = brc\r\n)","category":"page"},{"location":"real_example/#Sound-speed-profile","page":"Wind turbine noise propagation","title":"Sound speed profile","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"We just need to read sound speed profile to 2D vector Vec2. Note in the case our wind profile is relatively simple, we can input directly to here instead of preparing a text file of sound speed profile.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"sspl = Vec2(ssp[:,1],ssp[:,2]) # case 1\r\nssp = SSP(sound_speed_profile= sspl)","category":"page"},{"location":"real_example/#Analysis","page":"Wind turbine noise propagation","title":"Analysis","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"If you are not familiar with below set-up, please look back previous examples.","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"opt = Analysis(\r\n    filename = \"RealCase_Bellhop_f100\",\r\n    analyse = \"CG\",\r\n    option1 = \"CFW\",\r\n    option2 = \"F*\",\r\n    num_ray = 1601,\r\n    alpha = Vec2(-80.0f0,80.0f0),\r\n    box = Vec2(10f0,1000.0f0),\r\n    step= 0\r\n)","category":"page"},{"location":"real_example/#Create-input-files","page":"Wind turbine noise propagation","title":"Create input files","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Environment(opt,source, receiver,ssp,terrain,reflection)","category":"page"},{"location":"real_example/#Run-Bellhop","page":"Wind turbine noise propagation","title":"Run Bellhop","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"fn= opt.filename\r\nfilename = \"temp\\\\$fn\"\r\nrun_bellhop = `bellhop $filename`\r\n@time run(run_bellhop)","category":"page"},{"location":"real_example/#Results","page":"Wind turbine noise propagation","title":"Results","text":"","category":"section"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Waiting for 29.4 seconds, here is our results!","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"p1 = PlotRay(\"$filename.ray\",\r\n        xlabs = \"Range, m\",\r\n        ylabs = \"Height, m\")\r\n\r\n        plot!(p1,elv[:,1]*1000,elv[:,2],\r\n        lw=0,fill = 0, color = \"#8c510a\",legend = false)\r\n        yflip!(true)\r\n\r\n        scatter!(p1,[0], [source.height],\r\n        markersize = 6, color = \"#4daf4a\")\r\n\r\n#savefig(p1,\"ray_real.png\")","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"<p align=\"center\">\r\n    <img width=450 height=200 src=\"./ray_real.png\">\r\n</p>","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"Transmission loss field","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"p2 = PlotShd(\"$filename.shd\";\r\n        xlabs = \"Range, m\",\r\n        ylabs = \"Transmission loss, dB\",\r\n        cblabs = \"dB\",\r\n        climb = (40,120))\r\n\r\n        plot!(p2,elv[:,1]*1000,elv[:,2],\r\n        lw=0,fill = 0, color = \"#8c510a\", legend = false)\r\n        yflip!(true)\r\n\r\n        scatter!(p2,[0], [source.height],\r\n        markersize = 6, color = \"#4daf4a\",\r\n        label = \"Source\")\r\n\r\n#savefig(p2,\"trans_real.png\")","category":"page"},{"location":"real_example/","page":"Wind turbine noise propagation","title":"Wind turbine noise propagation","text":"<p align=\"center\">\r\n    <img width=450 height=200 src=\"./trans_real.png\">\r\n</p>","category":"page"}]
}
